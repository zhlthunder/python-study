
javascrpt是一种语言；
dom ： 是将整个html整合成了对象，提供给js去使用，可以理解为 dom 提供了js操作的数据结构；
jquery 是对 js 和 dom的整合，开发成了一种库，提高开发的效率，提供接口给用户调用；
即可以把jquery 看做是python中的库；

jquery官网：
http://jquery.com/

jquery 1.x 的低版本，主要是包含兼容IE低版本（IE6，IE7）浏览器的某些功能；
jquery的高版本，就放弃了对IE低版本浏览器的兼容；

但如何想要使用bootstrap等样式的话，要求jquery要使用2.x以上的版本；

jquery-3.2.1.min.js  是线上使用的版本，是压缩后的；
jquery-3.2.1.js 开发和看源码时使用的版本

学习论坛：
http://www.cnblogs.com/wupeiqi/articles/5369773.html
http://www.php100.com/manual/jquery/





jquery 之属性操作补充：
<div id='nid'></div>
$('#nid').toggleClass('hide')  第一次执行后：
<div id='nid' class='hide'></div>
$('#nid').toggleClass('hide')  执行第二次后：
<div id='nid'></div>

即toggleClass（）的功能就是有这个class时就删除，没有时就删除；


jquery 之属性文本操作：

html()  --> 对应js中的html   //获取标签和标签之间的所有的内容；
text() --> 对应js中的text  //获取标签和标签之间的文本
val()  -->对应js中的value // 专门用于 input系列，select,textarea, 即专门用来获取值的；

上面的三个方法， 可以有1个参数或没有参数；
没有参数：用于获取
一个参数；用于设置


<div id='nid'>asdfa<a>ppp</a></div>

执行：$('#nid').html()   ，得到： asdfa<a>ppp</a>

执行：$('#nid').text()   ，得到： asdfappp   //即只获取文本；

而val()  用于获取input  textarea 等标签中输入的值或select标签中选中的值；


jquery 之 css:
之前修改css的jquery方法是：$('#nid').addClass('cla'), 即通过直接添加class的方法来修改css样式；
.cla{
}
<div id='nid'></div>

而现在要讲的css的方法，专门是用来修改 标签的style="**" 中的选项的,即修改类似“color:red;font-size:17px;”
 中的key:value；
<div id='nid' style="color:red;font-size:17px;"></div>
操作的方法：
$('#nid').css('color','red');  //就是在style中增加一个  color:red 的属性：值 ；




jquery操作总结：
    属性


    css
       ---位置：
         offset([coordinates])  ：指的是某一个标签在整个页面中，离左上角的位置坐标；
         position() ： 只某一个标签相对于它的父标签的位置坐标；

       ---尺寸：（都是用来计算标签自己的尺寸大小的）
            height([val|fn])  标签自己的高度
            width([val|fn])   标签自己的宽度
              下面的四个指的是包含或不包含边框等，不常用；
            innerHeight()
            innerWidth()
            outerHeight([soptions])
            outerWidth([options])



    文档处理
     主要就是在某个标签前面加一个标签，或在它的后面加一个标签；或在这个标签里面的前面加一个标签或在这个标签的里面
     的后面加一个标签；

     内部插入
    append(content|fn)  在某个标签的内部的后面追加内容
              <div id="nid">xxx</div>
              $('#nid').append('<a>ff</a>');
              结果为：<div id="nid">xxx'<a>ff</a></div>

     prepend(content|fn) 在某个标签的内部的前面追加内容
                   <div id="nid">xxx</div>
              $('#nid').prepend('<a>ff</a>');
              结果为：<div id="nid"><a>ff</a>xxx</div>
     外部插入：
    after(content|fn)
    <div id="nid">xxx</div>  ==》<div id="nid">xxx</div><a>ff</a>

    before(content|fn)
     <div id="nid">xxx</div>  ==》<a>ff</a><div id="nid">xxx</div>


    appendTo(content)

    <div id="n1"><a>ff</a><div>
    <div id="nid">xxx</div>

     $('#n1').appendTo('#nid')
    结果为： <div id="nid">xxx<div id="n1"><a>ff</a><div></div>

    prependTo(content) 类似；

     删除
    empty()
    <div id="nid">xxx</div>
    $('#nid').empty()
    结果：<div id="nid"></div>

    remove([expr])
    <div id="nid">xxx</div>
    $('#nid').remove()
    删除整个标签及和绑定在这个标签上的事件；

    detach([expr])
    <div id="nid">xxx</div> 且这个标签绑定了事件；
    var ret=$('#nid').detach()
    执行detach时会返回一个值，包含这个标签的所有内容
    如果再执行append方法时：
    $('#container').append(ret)   绑定的事件依然有效


    复制
    clone([Even[,deepEven]])



    事件
      支持的事件：
      事件
        blur([[data],fn])
        change([[data],fn])
        click([[data],fn])
        dblclick([[data],fn])
        error([[data],fn])
        focus([[data],fn])
        focusin([data],fn)
        focusout([data],fn)
        keydown([[data],fn])
        keypress([[data],fn])
        keyup([[data],fn])
        mousedown([[data],fn])
        mouseenter([[data],fn])
        mouseleave([[data],fn])
        mousemove([[data],fn])
        mouseout([[data],fn])
        mouseover([[data],fn])
        mouseup([[data],fn])
        resize([[data],fn])
        scroll([[data],fn])
        select([[data],fn])
        submit([[data],fn])
        unload([[data],fn])


    AJAX
      按照传统的form表单的处理方式，只要一提交，整个页面就要刷新一次，如果想要提交表单且不刷新页面，就要使用ajax;
      ajax: 异步的javascript和xml;(asychnous javascript和 xml)

      但ajax不是jquery的东西，是对DOM 和 javascript的上层封装；

     ajax 跨域需要使用jsonp
         客户端：
         发送格式：jsonp
         函数名：比如为aa

         服务端：
           返回一个函数，样式为 ：   aa(内容。。。。)
            即返回一个以客户端发送的函数名封装的集合的样式；


           总结：
            1.请求的方法：
               发送ajax请求 $.ajax({...})
               还可以使用 $.get({..}) == $.ajax({.. type:get,})
                           $.post({..}) == $.ajax({.. type:post,})

            2.本域： 请求后直接返回；
              跨域： 请求时，先指定类型，指定函数名， 返回时需要将 内容封装到函数名里面；


    Jquery扩展
    其它