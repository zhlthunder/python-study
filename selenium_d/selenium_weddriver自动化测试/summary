# driver=webdriver.Firefox() ##火狐浏览器
# driver=webdriver.Ie() ##for ie
# driver=webdriver.Chrome() # for chrome
# driver.get("http://www.baidu.com")
# driver.implicitly_wait(10)
# driver.refresh()
# driver.back()
# driver.forward()
# driver.set_window_size(540,960)
# driver.maximize_window()
# driver.get_screenshot_as_file("./screenshot.png")
# # driver.close()##关闭当前窗口
# driver.quit() #退出浏览器进程，关闭所有窗口

# 配置文件地址
profile_directory = r'C:\Users\lin\AppData\Roaming\Mozilla\Firefox\Profiles\5ickf9vm.default-1478654411172'
# 加载配置配置
profile = webdriver.FirefoxProfile(profile_directory)
# 启动浏览器配置
driver = webdriver.Firefox(profile)

# 1.id定位：find_element_by_id(self, id_)
# 2.name定位：find_element_by_name(self, name)
# 3.class定位：find_element_by_class_name(self, name)
# 4.tag定位：find_element_by_tag_name(self, name)
# 5.link定位：find_element_by_link_text(self, link_text)
# 6.partial_link定位find_element_by_partial_link_text(self, link_text)
# 7.xpath定位：find_element_by_xpath(self, xpath)
# 8.css定位：find_element_by_css_selector(self, css_selector）

# 这八种是复数形式（2.8和2.27章节有介绍）
# 9.id复数定位find_elements_by_id(self, id_)
# 10.name复数定位find_elements_by_name(self, name)
# 11.class复数定位find_elements_by_class_name(self, name)
# 12.tag复数定位find_elements_by_tag_name(self, name)
# 13.link复数定位find_elements_by_link_text(self, text)
# 14.partial_link复数定位find_elements_by_partial_link_text(self, link_text)
# 15.xpath复数定位find_elements_by_xpath(self, xpath)
# 16.css复数定位find_elements_by_css_selector(self, css_selector

# 这两种是参数化的方法，会在以后搭建框架的时候，会经常用到PO模式，才会用到这个参数化的方法（将会在4.2有具体介绍）
# 17.find_element(self, by='id', value=None)
# 18.find_elements(self, by='id', value=None)

# 2.3.1 xpath:属性定位
# 1.xptah也可以通过元素的id、name、class这些属性定位，如下图：
# #用xpath通过id属性来定位
# # driver.find_element_by_xpath("//*[@id='kw']").send_keys("python")
# # #用xpath通过name属性来定位
# # driver.find_element_by_xpath("//*[@name='wd']").send_keys("python")
# #用xpath通过class属性来定位
# driver.find_element_by_xpath("//*[@class='s_ipt']").send_keys("python")
# 2.3.2 xpath:其它属性
# 1.如果一个元素id、name、class属性都没有，这时候也可以通过其它属性定位到
# driver.find_element_by_xpath("//input[@autocomplete='off']").send_keys("python")
# 2.3.3 xpath:标签
# 1.有时候同一个属性，同名的比较多，这时候可以通过标签筛选下，定位更准一点
# 2.如果不想制定标签名称，可以用*号表示任意标签
# 3.如果想制定具体某个标签，就可以直接写标签名称
# 2.3.4 xpath:层级
# driver.get("http://www.baidu.com")
##通过定位它老爸来定位input输入框，定位时发生报错，可能是不唯一造成的。
# driver.find_element_by_xpath("//span[@id='s_kw_wrap']/input").send_keys("python")
##通过定位它爷爷来定位input输入框,下面种方式相同
# driver.find_element_by_xpath('//form[@id="form"]/span/input').send_keys("python")
# 2.3.5 xpath:索引
# ##用xpath定位老大
# driver.find_element_by_xpath("//select[@id='nr']/option[1]").click()
# ##用xpath定位老二
# driver.find_element_by_xpath("//select[@id='nr']/option[2]").click()
# 2.3.6 xpath:逻辑运算
# driver.find_element_by_xpath("//*[@id='kw' and @autocomplete='off']").send_keys("python")
##xpath模糊匹配功能
# driver.find_element_by_xpath("//*[contains(text(),'hao123')]").click()
# driver.find_element_by_xpath("//*[contains(text(),'o123')]").click()
##xpath也可以模糊匹配某个属性
# driver.find_element_by_xpath("//*[contains(@id,'kw')]").send_keys("python")
##xpath模糊匹配以什么开头,定位失败，应该是不唯一的问题，同上
# driver.find_element_by_xpath("//*[starts-with(@id,'s_kw_')]/input").send_keys("python")
##xpath模糊匹配以什么结束,定位失败，应该是不唯一的问题，同上
# driver.find_element_by_xpath("//*[ends-with(@id,'kw_wrap')]/input").send_keys("python")

# 2.4.1 css:属性定位
# 2.如下是百度输入框的的html代码：
# <input id="kw" class="s_ipt" type="text" autocomplete="off" maxlength="100" name="wd"/>
# 3.css用#号表示id属性,如：#kw
# 4.css用.表示class属性，如：.s_ipt
# 5.css直接用标签名称，无任何标示符，如：input

# 2.4.2 css:其它属性
##css通过name属性定位
# driver.find_element_by_css_selector("[name='wd']").send_keys("python")
##css通过autocomplete属性定位
# driver.find_element_by_css_selector("[autocomplete='off']").send_keys("python")
##css通过type属性来定位,不唯一
# driver.find_element_by_css_selector("[type='text']").send_keys("python")


# 2.4.3 css:标签
# 1.css页可以通过标签与属性的组合来定位元素
# ##css通过标签和class属性的组合定位
# driver.find_element_by_css_selector("input.s_ipt").send_keys("python")
##css通过标签和id属性的组合定位
# driver.find_element_by_css_selector("input#kw").send_keys("python")
##css通过标签和其它属性组合定位
# driver.find_element_by_css_selector("input[autocomplete='off']").send_keys("python")
# 2.4.4 css:层级关系
##css通过层级关系定位
# driver.find_element_by_css_selector("form#form>span>input").send_keys("python")
##css通过层级关系定位
# driver.find_element_by_css_selector("form.fm>span>input").send_keys("python")
# 2.4.5 css:索引
# 1.以下图为例，跟上一篇一样：
# 2.css也可以通过索引option：nth-child(1)来定位子元素，这点与xpath写法用很大差异，其实很好理解，直接翻译过来就是第几个小孩。
##选择第1个option
# driver.find_element_by_css_selector("select#nr>option:nth-child(1)").click()
# ##选择第2个option
# driver.find_element_by_css_selector("select#nr>option:nth-child(2)").click()
# ##选择第3个option
# driver.find_element_by_css_selector("select#nr>option:nth-child(3)").click()

# 2.4.6 css:逻辑运算
# 1.css同样也可以实现逻辑运算，同时匹配两个属性，这里跟xpath不一样，无需写and关键字
# driver.find_element_by_css_selector("input[id='kw'][name='wd']").send_keys("python")

# 2.6.1 简单操作
#     1.点击（鼠标左键）页面按钮：click()
#     2.清空输入框：clear()
#     3.输入字符串：send_keys()
#     4.send_keys()如果是发送中文的，前面需加u，如：u"中文",
# 因为这里是输入到windows系统了，windows系统是GBK编码，我们的脚本是utf-8,需要转码为Unicode国际编码，这样才能识别到。
# 2.6.2 submit提交表单
# ##submit()模拟enter键提交表单
# driver.find_element_by_id("kw").submit()

# 2.6.3 键盘操作
#     1.selenium提供了一整套的模拟键盘操作事件，前面submit()方法如果不行的话，可以试试模拟键盘事件
#     2.模拟键盘的操作需要先导入键盘模块：from selenium.webdriver.common.keysimport Keys
#     3.模拟enter键，可以用send_keys(Keys.ENTER)

# 4.其它常见的键盘操作：
#     键盘F1到F12：send_keys(Keys.F1)把F1改成对应的快捷键：
#
#     复制Ctrl+C：send_keys(Keys.CONTROL,'c')
#
#     粘贴Ctrl+V：send_keys(Keys.CONTROL,'v')
#
#     全选Ctrl+A：send_keys(Keys.CONTROL,'a')
#
#     剪切Ctrl+X：send_keys(Keys.CONTROL,'x')
#
#     制表键Tab:  send_keys(Keys.TAB)

# 2.6.4 鼠标悬停事件
#     1.鼠标不仅仅可以点击(click),鼠标还有其它的操作，如：鼠标悬停在某个元素上，鼠标右击，鼠标按住某个按钮拖到
#     2.鼠标事件需要先导入模块：from selenium.webdriver.common.action_chainsimport ActionChains
#         perform() 执行所有ActionChains中的行为；
#         move_to_element() 鼠标悬停。
#     3.这里以百度页面设置按钮为例：
from selenium.webdriver.common.action_chains import ActionChains
driver=webdriver.Chrome()##使用chrome浏览器没有问题，使用火狐浏览器报错，推测还是浏览器兼容性的问题
driver.get("http://www.baidu.com")
time.sleep(3)
##将鼠标悬停在搜索设置按钮上
mouse=driver.find_element_by_link_text(u"设置")
ActionChains(driver).move_to_element(mouse).perform()
driver.implicitly_wait(5)
driver.find_element_by_link_text("搜索设置").click()

# 4.除了常用的鼠标悬停事件外，还有
#    右击鼠标：context_click()
#    双击鼠标：double_click()