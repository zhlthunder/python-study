flask-session:
  flask中的session处理机制
  自定义session（基本不会用）
  使用flask-session组件

详解：

  flask中的session处理机制：（内置：是将session保存在加密cookie中实现）
  因为是存储字cookie中的，所以用不上随机字符串，即此时的随机字符串就是 'session' 这个字符串。


   --请求到来：获取你的随机字符串，存在则去“数据库”中获取你原来的个人数据，否则创建一个空容器，确切地说是创建一个对象 （随机字符串，{防止数据的容器}），这些都是存在内存中
              #下面这部分完成了session的创建，即刚开始request封装时没有session,到这里已经有了
        #1.obj=创建SecureCookieSessionInterface()
        #2. 再执行obj.open_session(self.request)=SecureCookieSession()
        #也就是 self.session=SecureCookieSession()对象
        ##总结：调用了几个类，创建了一个特殊的字典
        self.session = self.app.open_session(self.request)


   --视图：操作 内存中对象 （随机字符串，{防止数据的容器}）
          比如执行这个操作： session['xxx']=123 --》session = LocalProxy(partial(_lookup_req_object, 'session'))， 和之前一样的操作，通过偏函数从ctx对象中session
            也就是上一步骤中创建的那个特殊的字典。
   --响应： 内存中对象 （随机字符串，{防止数据的容器}）
           ==》将数据保存到数据库中
               将随机字符串写在用户的cookie中

 自定义session（基本不会用）：

 请求刚进来：
    self.session = self.app.open_session(self.request)，
           因为此处的self就是ctx,所以这步的操作就是：创建特殊的字典，并添加到local中
           内部调用: self.session_interface.open_session(self, request) 又由于其中session_interface = SecureCookieSessionInterface()
            固上面就等价于：SecureCookieSessionInterface.open_session(self, request)

            如果此时我自定义一个类，如下：来替代上面的SecureCookieSessionInterface，
            class Mysessioninterface(object):
                def open_session(self,request):
                    return {}

            替换之后 就等于：Mysessioninterface.open_session(self, request)
            相当于就完成了自定义session的替换；

  调用的时候：
     session -->localproxy-->偏函数--》localstack -->去local中取值

   请求中止时： 调用save_session:
    内部调用: self.session_interface.save_session(self, app, session, response) 又由于其中session_interface = SecureCookieSessionInterface()
            固上面就等价于：SecureCookieSessionInterface.save_session(self, app, session, response)
    如果此时我自定义一个类，如下：来替代上面的SecureCookieSessionInterface，
    替换之后 就等于：Mysessioninterface.save_session(self, app, session, response)



    问题：
    设置cookie时，如何设定关闭浏览器则cookie失效？
    response.set_cookie('k','v',expire=None)  这样配置时可以满足需求，即不配置超时时间，以关闭浏览器失效；
