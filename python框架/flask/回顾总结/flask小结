#之前我们学习的装饰器如下:
def wrapper(func):
    def inner(*args,**kwargs):
        return func(*args,**kwargs)
    return inner

@wrapper  ##这部相当于执行 index=wrapper(index), 即将index函数作为参数带入wrapper函数中，执行结束后，返回innner函数，即index函数被重新装饰成inner函数
def index(request):
    pass

##现在我们对上面的装饰器进行改造一下：

def wrapper(option):
    def inner(func,*args,**kwargs):
        pass
    return inner

@wrapper({'k1':'v1'})
def index(request):
    pass

#说明：
# @wrapper({'k1':'v1'})的执行步骤如下：即
#step1:执行 wrapper({'k1':'v1'})，返回inner函数；
#step2:执行@inner,即执行 inner(index),即将index函数做为参数带入inner中执行
总结： 这种装饰器，分成两步来执行，先执行wrapper,在执行inner


##对比说明，和我们上面的装饰器不同的地方如下：
# @wrapper ：只执行wrapper函数；   需要调用index才可以执行inner函数；
#@wrapper({'k1':'v1'})：先执行wrapper函数，再执行inner函数； 不需要调用就可以执行inner函数；

##继续对上面的装饰器进行改造：
url_map={

}  ##定义一个空列表

def route(option):
    def inner(func,*args,**kwargs):
        url_map[option['path']]=func
    return inner

@route({'path':'/index'})
def index(request):
    pass



##经过上面装饰器执行后,url_map变为： url_map={'/index':index}
##即通过这种装饰器，实际上就生成了一个路由关系，当用户访问/index时，会自动执行index函数，这就是
# flask中路由的原理

补充： python中 用到的配置文件或全局变量，需要大写




flask相关
1.介绍flask , django tornado框架；
##python主流web框架介绍
##介绍flask和django,tornado的区别；
#django 是个重武器，内部包含了非常多的组件：ORM,Form,ModelForm,缓存，Session,中间件，信号等， 适用于大项目
#Flash 短小精悍，内部没有太多的组件，但第三方组件非常丰富。 即flask能缩能伸，可定制性很强。 适用于小项目，大项目
        # 路由比较特殊，是基于装饰器来实现的，但究其本质还是通过add_url_rule实现的。
##tornado 异步非阻塞，通过一个线程来执行一千个请求，性能更强
#bottle: 比flask更简洁，但线上应用很少，第三方组件少
#web.py: 和bottle的情况类似，应用较少


2.flask快速入门
pip3 install flask  //会同时安装所有的依赖包
创建一个虚拟环境： virtualenv flask_env
然后再pycharm中，创建工程，选到新创建的虚拟环境即可（在pycharm下也可以创建虚拟环境）

web框架中的WSGI，本质上就是完成socket的创建用的。
所有web框架的本质：
# import socket
#
# def handle_request(client):
#     buf = client.recv(1024)
#     client.send("HTTP/1.1 200 OK\r\n\r\n")
#     client.send("Hello, Seven")
#
# def main():
#     sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
#     sock.bind(('localhost',8000))
#     sock.listen(5)
#
#     while True:
#         connection, address = sock.accept()
#         handle_request(connection)
#         connection.close()
#
# if __name__ == '__main__':
#     main()


#: flask中使用的类似wsgi的模块为 werkzeug

# 使用 werkzeug实现的一个简单server(也就是socket服务器端);

# from werkzeug.wrappers import Request, Response
#
# @Request.application
# def hello(request):
#     return Response('Hello World!')
#
# if __name__ == '__main__':
#     from werkzeug.serving import run_simple
#     run_simple('localhost', 4000, hello)


flask基本用法：

from flask import Flask
##实例化flask对象
app = Flask(__name__)

#将url(/)和hellow_world的对应关系添加到路由中
@app.route('/')
def hello_world():
    return 'Hello World!'

if __name__ == '__main__':
    #监听用户请求
    #如果有用户请求到来，则执行app的__cal__方法
    ##__call__方法其实是整个请求的入口，在这个方法中把请求的数据进行封装，把请求中URL拿来进行路由映射，并执行视图函数，获取视图函数的返回值后给客户
        # app.__call__
    app.run()


使用信息：
return render_template('index.html',user=USERS)  //返回模板， 可以带参数，如果是返回的是一个字典，需要用**dict的方式；
request.query_string ##包含URL请求头中的信息  //需要先导入request
request.form ##包含form表单中的信息//需要先导入request
字典中值的存入： dict['key']='v'
字典中值的获取： dict.get('key')
return redirect("/index")  //重定向的方法，需要导入redirect， 注意 /index和 /index/的差异
模板中访问字典的方法：
 {%  for k,v in user.items() %}  //必须加（）
    <tr>
    <td>{{k}}</td>
    <td>{{v.name}}</td>    //type1：v.name
    <td>{{v['age']}}</td>  //type2：v['age']  type3: v.get('age')
      <td><a href="/detail/{{k}}">查看详细</a></td>  //切换页面的方法  ， 对应的url正则匹配的方法： @app.route(/detail/<int:nid>)  ,这样在detail函数中就可以使用nid变量了

 如果要保持用户会话，可以使用session
 session['user']=user  写session
 user=session.get('user') 获取session,斌判断是否登录；

在route中定义endpoint='n1',导入url_for,  就可以反向生成url了。
url=url_fo('n1')
如果url中有变量时，也可以指定：
比如/detail/<int:nid>
url=url_for('n2',nid=22) //对应的url为/detail/22  注意，此时跳转时，肯定是调到指定的一个数字的页面，而不会是一个变量，否则就不知道要调到哪里去了，即目标的URL必须是明确唯一的。


3.配置文件

# flask参数配置的方法：
type 1.app.config['DEBUG'] = True
type 2.app.debug=True
type 3.app.config.from_pyfile("settings.py")
          settings.py 中内容样式为“ DEBUG=True”

#以上三种方法都不常用
tyep 4.在settings.py中定义类,应用方法：app.config.from_object("settings.DevelopmentConfig")  ##通过字符串导入模块的方法，用到importlib和rsplit，切记
setting.py的文件定义如下：
class Config(object):
    DEBUG = False
    TESTING = False
    DATABASE_URI = 'sqlite://:memory:'

class ProductionConfig(Config):
    DATABASE_URI = 'mysql://user@localhost/foo'

class DevelopmentConfig(Config):  //重载了父类的属性
    DEBUG = True

class TestingConfig(Config):
    TESTING = True

4.路由系统
路由中用到的参数：
添加路由方法1：
app.route('/',methods=['GET','POST'],endpoint='n1')

添加路由的方法2：
app.add_url_rule("/login",'n2',login,methods=['GET','POST'])

add_url_rule（也就是route）中支持的参数：

"""
参数介绍：
defaults=None,              默认值,当URL中无参数，函数需要参数时，使用defaults={'k':'v'}为函数提供参数
endpoint=None,              名称，用于反向生成URL，即： url_for('名称')
methods=None,               允许的请求方式，如：["GET","POST"]

strict_slashes=None,        对URL最后的 / 符号是否严格要求，
                           如：
                           @app.route('/index',strict_slashes=False)，
                           访问 http://www.xx.com/index/ 或 http://www.xx.com/index均可
                           @app.route('/index',strict_slashes=True)
                           仅访问 http://www.xx.com/index

redirect_to=None,           重定向到指定地址
                            如：
                            @app.route('/index/<int:nid>', redirect_to='/home/<nid>')
                             或
                             def func(adapter, nid):
                             return "/home/888"
                               @app.route('/index/<int:nid>', redirect_to=func)


#defaults= 参数举例
# @app.route('/index',methods=['GET','POST'],endpoint='n1',defaults={'nid':88})
# def index(nid):
#     print(nid)
#     return 'Hello World!'

##redirect_to= 参数举例
@app.route('/index',methods=['GET','POST'],endpoint='n1',redirect_to='/index2')
def index():
    return '公司老页面'

@app.route('/index2',methods=['GET','POST'],endpoint='n2')
def index2():
    return '公司新页面'


# subdomain=None,             子域名访问
##  www.baidu.com  为主域名
##  api.baidu.com  为子域名
比如：
配置如下：
app.config['SERVER_NAME'] = 'thunder.com:5000'  #配置域名
@app.route("/", subdomain="admin")
@app.route("/dynamic", subdomain="<username>")    #<username>  类似于字符串表达式

# 然后就可以访问如下的地址了：
# http://www.thunder.com:5000/dynamic  没有定义主网站，此时www也被匹配成了subdomain="<username>"
# http://admin.thunder.com:5000
# http://api.thunder.com:5000/dynamic  也匹配成subdomain="<username>"

默认支持的路由系统：
@app.route('/user/<username>')  表示字符串
@app.route('/post/<int:post_id>') 表示整数
@app.route('/post/<float:post_id>') 表示小数
@app.route('/post/<path:path>') 路径
@app.route('/login', methods=['GET', 'POST'])

自定义一个类用于执行URL的正则匹配：
/index/<int:nid>  这种方式中int匹配的是整形，匹配之后的值在nid变量中并传给视图函数
/index/<regex("xb\d+"):nid>  这种方式中<regex("xb\d+")是使用自定义的方式匹配的正则表达式，匹配之后的值在nid变量中并传给视图函


5.模板语言
自定义函数传递到模板中执行，在模板中可以带括号，也可以传参数
比如后端定义的函数：
# def func1(arg):
#     return arg+":阿斯顿发送到发送到"
return render_template("s7.html",ff=func1)  ##传递到模板中

{{ff("六六")}}<br/>  //在模板中使用后端传过来的函数

xss攻击相关：目前的模板框架，都自动开启了防xss攻击的功能，即后端传递过来的html语言，前端不解析。
如果要临时关闭这种功能，有如下的方法：
方法1：  {{ff("六六")|safe}}  前端使用管道符+safe
方法2： return Markup("<input type='text' value='%s' />"%(arg))  后端对要返回的内容执行Markup方法，记得要先导入markup

总结：flask 的jinjia2模板语言，支持在后端定义函数，传递到前端，然后在前端执行；
如果定义的函数中包含 html语句，就会存在xss攻击的风险， flask中规避的方法：
方法1：在前端使用 |safe (即管道符加safe)的方法，格式如下：
{{ff("六六")|safe}}

方法2：在后端使用Markup 对要传递的字符串进行格式化，范例如下：
Markup("<input type='text' value='%s' />"%(arg))

备注：不采取上面的措施时，前端看到的信息如下，而没有解析成一个input框
 <input type='text' value='六六' />

 # type2: 宏定义
"""
可以通过宏定义，在前端页面中定义一个程序块，格式举例如下，这样就可以在前端生成4个input框

 {% macro xx(name, type='text', value='') %}
        <input type="{{ type }}" name="{{ name }}1" value="{{ value }}">
        <input type="{{ type }}" name="{{ name }}2" value="{{ value }}">
        <input type="{{ type }}" name="{{ name }}3" value="{{ value }}">
        <input type="{{ type }}" name="{{ name }}4" value="{{ value }}">
  {% endmacro %}

 {{xx('n')}}


6.请求&响应相关
 # 请求相关信息
    # request.method
    # request.args
    # request.form
    # request.values
    # request.cookies   request.cookies.get()
    # request.headers
    # request.path
    # request.full_path
    # request.script_root
    # request.url
    # request.base_url
    # request.url_root
    # request.host_url
    # request.host
    # request.files
    # obj = request.files['the_file_name']
    # obj.save('/var/www/uploads/' + secure_filename(obj.filename))
     ##secure_filename 实际上是对文件名进行加密，以加密后字符串作为文件名，防止文件名重复


     # 响应相关信息
    # return "字符串"
    # return render_template('html模板路径',**{})
    # return redirect('/index.html')
    # return jsonify({'k1':'v1'})  ##返回json格式的数据给前端页面

    ##对响应进行二次加工， 比如设置cookie,设置响应头等等
    # response = make_response(render_template('index.html'))  ##返回模板文件时，先创建一个响应对象，需要先导入make_response
    # response = make_response(“this is index page”) ##返回的是字符串时，先创建一个响应对象，需要先导入make_response
    # response是flask.wrappers.Response类型  ##对象的类型
    # response.delete_cookie('key')  ##删除cookie
    # response.set_cookie('key', 'value') ##设置cookie
    # response.headers['X-Something'] = 'A value'  ##设置响应头
    # return response   ##返回响应的对象

7.session&cookie
session在使用前必须设置：
app.secret_key='asdfasdf'
session 是一个特殊的字典对象，使用方法如下：

 session['user']=user  写session
 user=session.get('user') 获取session


补充内容： 知识点补充_程序开发扩展性相关
def send_msgs(msg):
    for path in settings.MSG_LIST:
        m,c=path.rsplit('.',maxsplit=1)   ##从右边开始分割1次，就把模块路径和 类或函数分割开了
        md=importlib.import_module(m) ##动态导入模块
        cls=getattr(md,c)   ##基于类的字符串从模块中找到对应的类
        # print(md,cls)
        obj=cls()   ##类的实例化
        obj.send(msg) ##执行类的方法
        # print(path)
    # print("it is tesinggasdfafd")

##此处非常重要，根据字符串导入模块，然后使用反射获取类名

装饰器相关的问题：
说明：如果登录验证的装饰器放到路由装饰器的上面，会导致路由添加也被阻止了，所以需要放到路由装饰器的下面；
但放到路由装饰器的下面，执行时会报如下的错误：
AssertionError: View function mapping is overwriting an existing endpoint function: inner
原因说明：
默认不指定endpoint时，endpoint=函数名；
index和detail 被同一个装饰器装饰时，都会被替换成inner函数，即存在两个相同函数名inner,所有会报错

解决对策1：
为每个被装饰的函数指定endpoint

解决对策2：
import functools
def verify(func):
    @functools.wraps(func)  ##加上这个后，删除endpoint,在执行就不会报错了，即函数名没有变化，就不会出现重名的问题了，帮忙设置函数的元信息，即让函数名不变
    def inner(*args,**kwargs):
        user=session.get('user_info')
        if not user:
            return redirect('/login')
            # return redirect("/login")
        return func(*args,**kwargs)
    return inner



8.闪现，基于session来实现的，所以需要设置app.secret_key="asdfad"
from flask import Flask,flash,get_flashed_messages
#向某个地方设置一个值
flash("asdfasdfafsd")

#从某个地方获取设置过的所有值，并清除
#闪现：就是读取一次后就被清除了，所以叫这个名字
data=get_flashed_messages()

flash中存储的数据可以进行分类：
flash("超时错误"，cagtegory="xxx")
get_flashed_messages(cagtegory_filter=['xxx'])  这样取的时候只拿这一类的数据，其它的数据可以不动

闪现：就是用session实现的，即先把数据存放到session中，获取的时候采用pop的方法，这样数据清除了
另外，既然是基于session实现的，那就不用担心数据错乱的问题，
什么是数据错乱呢？ 即不同的客户端用户访问产生的错误信息，可以准确的按照用户别区分开来，为什么呢？
session本质上维护的就是一个用户列表，所以已经实现了对用户的隔离

闪现应用于：对临时数据操作，如：显示错误信息
http://localhost:5000/index?v=asdfadfsafsd
使用 val=request.args.get('v') 获取请求头中的数据；

因为flash是基于session实现的，就会很好的实现在不同用户间进行数据的隔离；因为session已经基于用户实现了隔离；

9.蓝图
pro_flask_简单应用程序目录示例

1).批量修改url
account = Blueprint('account', __name__,url_prefix="/acc")
#url_prefix="/acc"  用于对这个蓝图下面的所有URL 统一加个前缀； 即访问方式变更：/account--》/acc/account

2).模板路径/静态文件路径
account = Blueprint('account', __name__,url_prefix="/acc",template_folder='tpls')
#url_prefix="/acc"  用于对这个蓝图下面的所有URL 统一加个前缀； 即访问方式变更：/account--》/acc/account##template_folder='tpls'
 定义这个蓝图下专用的templates,以实现templates的分离，但有个优先级的问题，如果templates和tpls中都有相同的模块，优先寻找templates中的

3).请求扩展相关：
    在__init__中使用，针对全站所有的app都适用；
    在蓝图中使用时，只针对这个蓝图中的url适用，别的url不适用。   用户认证的代码，可以在蓝图中实现，这样只要在登录以外的视图函数中实现即可，登录函数不需要实现。
     也就避免了使用黑名单了。


4). 重要：
蓝图对象的名称和蓝图中视图函数的名称一定不可以相同，否则就会报错，切记；




10.请求扩展（django中间件）
###########################################
@app.before_request  在每次请求之前都会执行
@app.after_request  每次响应返回之前执行
@app.before_first_request 只在第一次请求前执行

@app.errorhandler(404)  根据状态码定制错误页面

定制模板方法：
@app.template_global()
@app.template_filter()
###########################################
详细如下：

##这个函数会在每次request请求之前执行， 所以登录认证的功能可以在此实现(重要*****)
@app.before_request
def process_request(*args,**kwargs):
    print("请求之前")
    # print(request.url)  输出：http://localhost:5000/index
    print(request.path)  #输出： /index
    if request.path == '/login':
        return None

    user=session.get('user_info')
    if user:
        return None
    return redirect('/login')

    # return "拦截"    ##此处如果使用return,且返回的不是None, 那后面视图函数就无法执行了，页面上只显示 “拦截”

 进阶1：
 @app.before_request  ##每次请求到来后首先执行的。
def process_request(*args,**kwargs):
    print("进来了")

###中间是视图函数

 @app.after_request  ##没有响应返回前要执行的。
def process_response(response):
    print("走了")
    return response

==》      @app.before_request ==》视图 ==》@app.after_request

@app.before_request
def process_request1(*args,**kwargs):
    print("process_request1进来了")

@app.before_request
def process_request2(*args,**kwargs):
    print("process_request2进来了")


@app.after_request
def process_response1(response):
    print("process_response1走了")
    return response

@app.after_request
def process_response2(response):
    print("process_response2走了")
    return response


@app.route('/index',methods=['GET'])
def index():
    print("index 函数")
    return "index"

 执行流程：process_request1--》process_request2--》视图--》process_response2--》process_response1
重点：即在request1中执行拦截后，视图函数就不执行了，但所有的response还要继续执行

@@给模板定制filter或simple_tag,类似django中用到的自定义过滤标签：
##函数定制：

在后台中定义如下的函数，然后再模板文件中调用
@app.template_global()
def sb(a1, a2):
    return a1 + a2


@app.template_filter()
def db(a1, a2, a3):
    return a1 + a2 + a3


html调用方式：{{sb(1,2)}}  {{ 1|db(2,3)}} 备注：这个写法，1是第一个参数



11.中间件
用法实例：
from flask import Flask
app = Flask(__name__)


@app.route('/')
def index():
    return 'Hello World!'

class Md(object):
    def __init__(self,old_wsgi_ap):
        self.old_wsgi_ap=old_wsgi_ap

    def __call__(self, environ, start_response):
        print("开始之前")  ##实现中间件的功能代码
        ret=self.old_wsgi_ap(environ, start_response)
        print("开始之后") ##实现中间件的功能代码
        return ret

if __name__ == '__main__':
    app.wsgi_app=Md(app.wsgi_app)  ##相当于对响应流程进行装饰
    app.run()



12.上下文管理
   threadinglocal  本地线程  //在python中涉及多线程编程时会用到的部分
   使用方法：
    import threading
    local_values = threading.local()  ##可以理解为：来了一个线程时，就开辟一个专用的空间给你使用，保存这个线程独有的值

应用实例：

##协程  gevent 安装：pip3 install gevent ，会安装 greenlet, gevent 两个模块
##pip安装指定版本的命令： pip3 install pyasn1==0.4.2

# import flask.globals
import  flask,threading
# from greenlet import getcurrent as get_ident  ##获取当前协程的ID的模块
 from _thread import get_ident ##可以获取线程的唯一标识的模块

##模块导入
try:
    from greenlet import getcurrent as get_ident  #先尝试导入协程相关的获取ID的模块， 即优先使用协程，如果没有安装协程的模块，就不支持协程
except ImportError:
    try:
        from thread import get_ident  ##如果上面的报错，表示不支持协程，再导入线程相关的获取ID的模块
    except ImportError:
        from _thread import get_ident


##下面的这个类就可以为每个线程开辟空间保存它的值了
class Local(object):
    def __init__(self):
        self.storage={}  //定义一个大字典
        self.get_ident=get_ident

    def set(self,k,v):
        ident=self.get_ident()  #获取线程的唯一标识
        origin=self.storage.get(ident)  #用唯一标识查字典
        if not origin: ##如果没有这个进程或协程的信息，则为这个进程新创建一个字典
            origin={k:v}
        else:
            origin[k]=v  ##如果已经有这个进程对应的字典，则直接添加
        self.storage[ident]=origin

    def get(self,k):
        ident=self.get_ident()  #获取线程的唯一标识
        origin=self.storage.get(ident)
        if not origin:
            return None
        return origin.get(k,None)

local_values=Local()

def func(num):
    local_values.set('name',num)  //为每个线程创建单独的数据空间
    import time
    time.sleep(1)
    print(local_values.get('name'), threading.current_thread().name)


for i in range(20):
    th = threading.Thread(target=func, args=(i,), name='线程%s' % i)
    th.start()

# 输出： 结果和前面的threadinglocal的输出相同，即目前我们定义的类已经完成了和threadinglocal类似的功能了
# 1 线程1
# 0 线程0
# 2 线程2
# 3 线程3
# 4 线程4
# 7 线程7
# 6 线程6
# 5 线程5
# 9 线程9
# 8 线程8
# 10 线程10
# 13 线程13
# 11 线程11
# 12 线程12
# 15 线程15
# 14 线程14
# 16 线程16
# 17 线程17
# 18 线程18
# 19 线程19


flask内部对local的定义方法，应用到了很多面向对象的知识：
class Local(object):
    def __init__(self):
        object.__setattr__(self, '__storage__', {})
        object.__setattr__(self, '__ident_func__', get_ident)


    def __getattr__(self, name):
        try:
            return self.__storage__[self.__ident_func__()][name]
        except KeyError:
            raise AttributeError(name)

    def __setattr__(self, name, value):
        ident = self.__ident_func__()
        storage = self.__storage__
        try:
            storage[ident][name] = value
        except KeyError:
            storage[ident] = {name: value}

    def __delattr__(self, name):
        try:
            del self.__storage__[self.__ident_func__()][name]
        except KeyError:
            raise AttributeError(name)
 这样赋值的变化：local_values.set('name',num)  ==》local_values.name=num ，因为有了__setattr__, 其它获取和删除操作用法类似


一.上下文管理源码：

flask中请求处理的大概的流程是：
源码内部定义了3个类来处理请求，
请求到来后，environ中包含了请求相关的全部的原始信息，可能是一个字符串；
先调用一个方法，把字符串转换成 类的请求对象， 再调用一个方法把请求对象存放到local中；
然后接受请求，通过路由进入视图函数处理，在视图函数处理过程中调用存放在local中的对象，当请求处理完成返回后，
会删除local中存放的请求对象。 这样一次处理过程结束；

请求进来之后，先执行flask的__call__方法；


请求处理流程简析：

a)请求进来之前，先执行 _request_ctx_stack = LocalStack() ，执行LocalStack实例化；
  def __init__(self):
        self._local = Local()
    再进一步执行Local的实例化，执行它的init方法：
        def __init__(self):
        object.__setattr__(self, '__storage__', {})
        object.__setattr__(self, '__ident_func__', get_ident)

        请注意，此处的 Local() 和我们之前在threadinglocal中完成的功能类似


b)请求到来-->Flask类 __call__方法 （1.内部调用Flask类的request_context 方法）-->实例化一个RequestContext类的对象（1.1 __init__方法）
在__init__方法中的如下代码中，完成请求字符串转为请求对象的操作
        if request is None:
            request = app.request_class(environ)

然后在flask的request_class方法调用的是另一request类来完成请求的封装的操作
#: The class that is used for request objects.  See :class:`~flask.Request`
    #: for more information.
    request_class = Request

 调试打印：（请求封装前后）
         print(environ)
        print(ctx)
输出：
        {'wsgi.version': (1, 0), 'wsgi.url_scheme': 'http', 'wsgi.input': <_io.BufferedReader name=1036>, 'wsgi.errors':
         <_io.TextIOWrapper name='<stderr>' mode='w' encoding='GBK'>, 'wsgi.multithread': False, 'wsgi.multiprocess': False,
         'wsgi.run_once': False, 'werkzeug.server.shutdown': <function WSGIRequestHandler.make_environ.<locals>.shutdown_server at 0x05DBEB28>,
         'SERVER_SOFTWARE': 'Werkzeug/0.12.2', 'REQUEST_METHOD': 'GET', 'SCRIPT_NAME': '', 'PATH_INFO': '/', 'QUERY_STRING': '',
          'REMOTE_ADDR': '127.0.0.1', 'REMOTE_PORT': 56315, 'SERVER_NAME': '127.0.0.1', 'SERVER_PORT': '5000', 'SERVER_PROTOCOL': 'HTTP/1.1',
           'HTTP_HOST': '127.0.0.1:5000', 'HTTP_CONNECTION': 'keep-alive', 'HTTP_CACHE_CONTROL': 'max-age=0', 'HTTP_UPGRADE_INSECURE_REQUESTS': '1',
           'HTTP_USER_AGENT': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36',
            'HTTP_ACCEPT': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'HTTP_ACCEPT_ENCODING':
             'gzip, deflate, br', 'HTTP_ACCEPT_LANGUAGE': 'zh-CN,zh;q=0.9', 'werkzeug.request': <Request 'http://127.0.0.1:5000/' [GET]>}
<RequestContext 'http://127.0.0.1:5000/' [GET] of s1>


        print(type(environ))
        print(type(ctx))
        输出：
        <class 'dict'>
<class 'flask.ctx.RequestContext'>

 然后再执行： ctx.push() ，进入查看，主要看下面这行
  _request_ctx_stack.push(self)  //self是RequestContext 对象，其中包含了请求相关的所有信息
  而_request_ctx_stack是LocalStack类的对象，即执行了这个类的push方法，将请求相关的信息都存入local中（每个线程或每个协程都是独立的）

  最终：
      ##name='stack'
        #value=[]
        #写入后的字典如下：
        #{
        #唯一标识：{
        #   stack:[]
        # }
        #append 请求相关的信息之后：
          #{
        #唯一标识：{
        #   stack:[requestcontext对象 ctx]
        # }


  先看请求执行完成之后清场的操作：#将自己存放在local中的数据移除掉
          finally:
            if self.should_ignore_error(error):
                error = None
            ctx.auto_pop(error)   //这个就是将请求相关的信息从local中移除


  现在再来看请求处理的过程：
  先按照使用的步骤，我们导入request,然后就可以执行print(request.method)了，这个request从哪里来的呢？
  我们来看下它的源码；
  直接点击request定位到：
  request = LocalProxy(partial(_lookup_req_object, 'request'))
  说明：partial(_lookup_req_object, 'request') 是偏函数的一个用法，即先把'request' 参数封装到_lookup_req_object函数中，即先封装一个参数进去

  即request = LocalProxy(函数） ，即这是一个实例化的对象，且函数中已经使用partial封装了一个参数进去。
        下面就是   LocalProxy的init方法；
      def __init__(self, local, name=None):
        #参数传递信息local=partial(_lookup_req_object, 'request')
        object.__setattr__(self, '_LocalProxy__local', local)
        object.__setattr__(self, '__name__', name)
        if callable(local) and not hasattr(local, '__release_local__'):
            # "local" is a callable that is not an instance of Local or
            # LocalManager: mark it as a wrapped function.
            object.__setattr__(self, '__wrapped__', local)



 调用request时的操作过程的解析：
 request = LocalProxy(partial(_lookup_req_object, 'request'))
#上面这句解析：
# request = LocalProxy(函数）
#当视图中执行print(request)时，
     # 执行 LocalProxy的__str__方法，这个方法比较复杂，可以先理解为就是执行LocalProxy 中传递的函数，即执行 partial(_lookup_req_object, 'request')
     #这个函数执行过程如下：
    #  def _lookup_req_object(name): ##name='request‘
    # top = _request_ctx_stack.top   # 这句相当于从requestcontext对象中获取之前存入的request对象
    # if top is None:
    #     raise RuntimeError(_request_ctx_err_msg)
    # return getattr(top, name)  #从requestcontext对象 获取 'request'对应的方法

    #再举例，当执行print(request.method)时，
    # 因为是request.method,即执行 LocalProxy的__getattr__方法，也要执行的_get_current_object() 方法，这个方法比较复杂，可以先理解为就是执行LocalProxy 中传递的函数，即执行 partial(_lookup_req_object, 'request')
    #完成到的功能也是从这句相当于从requestcontext对象中获取之前存入的request对象 ，然后再执行getattr(self._get_current_object(), name)从中获取method方法：


    flask 请求 之上下文源码总结：
    1）threading local和flack自定义的local() 对象；threading local: 是基于线程的数据保存， flask 源码实现的local(),是支持协程的数据保护
    2)
     请求到来：
        ctx 封装到requestcontext(request,session)中，
        并把ctx存放到local中
     执行视图时：
        导入request
        print(request) -->执行LocalPorxy对象的__str__方法
        request.method  -->执行LocalPorxy对象的__getattr__方法
        ......
           这些方法的内部，都会调用 _lookup_req_object  这个函数， 这个函数就是取local() 中将requestcontext获取到，再去requestcontext中获取request或session

     执行结束：
        ctx.auto_pop(), 最终把ctx从local中移除；


  flask上下管理回顾：
   与django相比是两种不同的实现方式；
     django/tornado是通过传参数的形式，怎么理解呢？ django中请求到来之后，包含请求信息的request通过函数之间的传递到达视图函数，然后进行处理的
     flask是通过上下文管理，它中对request的管理是通过上下文管理来实现的

     上下文管理：
         1)threading local与local()  : 实现数据隔离的方式
           threading.local是为每一个线程开辟一个空间存储数据；
           flask源码中实现了一个local()类， 创建一个字典来保存数据，字典的key使用greenlet获取的标识，即是支持协程的。

        2）请求刚进来时
              把request和session 相关的所有数据封装到了requestcontext对象中，并把这个对象添加到local()中 ，通过localstack将对象添加到local对象中

           使用（调用request）
             比如调用此类的方法， request.method, print（request）, request+xxx 会执行localproxy中对应的方法
             内部就是执行一个内嵌函数，这个函数会从local中获取requestcontext对象，并从中获取request或session等

           请求终止
              通过localstack的pop方法将local中的值移除；



加上应用上下文后的请求流程如下：

1.请求到来到的时候，有人来访问了
      实例化了两个对象
        #将请求相关的数据environ封装到了request_context对象中
        # ctx.app  当前app的名称
        # ctx.request： Request对象（封装请求相关的东西）
        # ctx.session  #此时session是空的
          #_request_ctx_stack.local{
          #  唯一标识：{
          #    “stack”:[ctx,]}   //"stack"是固定的
          # }

       #app_ctx=创建AppContext（self）对象
     #里面包含：
     #app_ctx.app 当前app对象
     # app.g  为请求刚进来时，创建的一个空的对象，用于存储一个请求周期中需要存取的值

           #_app_ctx_stack.local{
          #  唯一标识：{
          #    “stack”:[app_ctx,]}   //"stack"是固定的
          # }


2.使用时：
  from flask import request,session,g,current_app
  当执行print(request,session,g,current_app),都会执行响应localproxy对象的__str__方法，
  request = LocalProxy(partial(_lookup_req_object, 'request'))
  session = LocalProxy(partial(_lookup_req_object, 'session'))

  current_app = LocalProxy(_find_app)
g = LocalProxy(partial(_lookup_app_object, 'g'))

3.终止时：
全部pop掉


问题1： 多线程到来时是如何处理的？
      确切地说，请求到来之前，已经创建了两个local()对象，
      当多个用户来访问时，比如启动的是多线程来处理多个用户请求，
      始终使用这两个local对象，增加的只是基于唯一标识的字典
          #_request_ctx_stack.local{
          #  唯一标识：{
          #    “stack”:[ctx,]}   //"stack"是固定的
          # }
                    #  唯一标识：{
          #    “stack”:[ctx,]}   //"stack"是固定的
          # }
          }

问题2： 为啥用“stack”:[ctx,] ，而不是“stack”:ctx
因为flask的local中保存数据时，使用列表创建出来的栈


多app应用的方法：
from werkzeug.wsgi import  DispatcherMiddleware
from werkzeug.serving import run_simple
from flask import Flask,current_app

app1=Flask('app01')
app2=Flask('app02')



@app1.route('/index')
def index():
    print(current_app)
    return 'app01'

@app2.route('/index2')
def index2():
    print(current_app)
    return 'app02'

#www.baidu.com/index  app1
#www.baidu.com/sec/index  app2
dm=DispatcherMiddleware(app1,{
    '/sec':app2
})

if __name__ == '__main__':
    run_simple('localhost',5000,dm,)

web访问多app应用时，上下文管理是如何实现的？
和单app完全相同，栈里面存放的还是一个唯一标识

多app应用时，请求的流程如下：
只是在上面的流程之前，先进行了一次app的分发，其它的流程和单个app完全相同，因为local中还是根据线程来进行存储的。

补充：
继续上面的问题2，为什么要使用栈？  主要用途： 离线脚本
  写离线脚本时，且使用嵌套的方式时才会出现保存多个对象的情况。
  如果写web程序或web运行环境，栈中用于保存一条数据。
  当我们在写离线的测试脚本获取app信息时，可能会存在多个app上下文嵌套的情况。--但这种情况很少用。

  from flask import Flask,current_app,globals,_app_ctx_stack

app1=Flask('app01')
app1.debug=True
##如果app中存储了数据库的用户名，密码，数据库等信息， 在下面就可以获取到，然后建立数据库的连接

app2=Flask('app02')
app2.debug=False

with app1.app_context():  #相当于执行 with AppContext(self): 会自动执行它的__enter__方法，最终也是执行 _app_ctx_stack.push(self)，即自动执行了压栈的操作
        ##实例化对象： app_ctx=AppContext
        ##里面包含：
        #  app_ctx.app
        #  app_ctx.g
    #既然上面已经完成了压栈的操作，我现在直接打印出来看看
    print(_app_ctx_stack._local.__storage__)
    #输出： {<greenlet.greenlet object at 0x06240B20>: {'stack': [<flask.ctx.AppContext object at 0x059F4E50>]}}
    print(type(current_app)) #这是返回app对象
    print(current_app.config)
    print(current_app.config['DEBUG'])

    ##且上面的操作执行完成之后，就会执行pop操作

with app2.app_context():
    print(_app_ctx_stack._local.__storage__)


print("------------------------------")


##所以如果并排写两个with,那就是一个一个处理，local始终只有一个对象
#但如果用下面的方法来写的话：

with app1.app_context():
    print(_app_ctx_stack._local.__storage__)  #此时栈中存放的是app1,且app1是最后的一个，执行top时获取的就是它 ；
    #{<greenlet.greenlet object at 0x05C70B20>: {'stack': [<flask.ctx.AppContext object at 0x05D7E050>]}}
    with app2.app_context():
        print(_app_ctx_stack._local.__storage__)#此时栈中存放了app1,app2
        #{<greenlet.greenlet object at 0x05C70B20>: {'stack': [<flask.ctx.AppContext object at 0x05D7E050>, <flask.ctx.AppContext object at 0x05D7E0D0>]}}
        print(current_app.config['DEBUG'])
        #重要：在这个代码块中执行top操作时，获取的也是自己,即获取的是app2，发生错乱
    ##当上面的代码块执行结束后，会pop掉app2,这样栈中最后一个还是app1,不影响下面对app1的获取操作（非常重要，这就是为什么要使用栈的原因，这也就回答了readme中问题2）
    ##！！只有这种情况才会出现这样的应用场景， 如果写网站的话，栈中同时只会有一个对象@@@
    print(current_app.config['DEBUG'])


最终总结：
1.threading.local (哪里还用到threading.local?  DButils中也用到)， 自定义local()
2.上下文：
  -请求：
     - request：用户请求信息
     - session：保存用户会话信息
  -应用：
     - app :当前应用对象的信息
     - g： 每个请求周期都会创建的一个用于在请求周期内传递值的一个容器
3. 多app应用& 蓝图
蓝图：是在app之后通过代理进行分发
多app:就是基于多个app进行分发

4.栈？

5.面向对象补充的内容：
 - 封装： 支持对象的直接封装，比如下面的Foo和Bar的 __init__就是完成的封装
          也支持嵌套封装，在Base中的__init__中封装的是别的类的对象（很常用）
   class Foo:
       def __init__(self):
            self.name=123
            self.age='asdf'
   class Bar:
        def __init__(self):
             self.xxx=123

   class Base:
        def __init__(self):
        self.f=Foo()
        self.xx=Bar()

 --某个值+（）
 函数/方法：执行函数或方法
 类：实例化
 对象：执行类的__call__方法

 --面向对象中双下划线的方法：
 __new__
 __init__
 __call__
 __setattr__
 __str__
 __getattr__
 __delattr__
 __enter__
 __exit__
 __add__
 ......

 可以参考： flask中 localproxy中都用到


 --强制调用私有字段：
    私有字段在派生类中无法使用，切记；；


 6.源码的流程需要搞清楚；
  ps:自定义堆和栈
    栈：类似弹夹，后进先出
    堆：先进先出

2.信号

3.数据库连接池
