1.django安装
下载源码，解压， python setup.py install
验证安装成功的方法 ： 进入python交互模式，import django
如果可以导入成功，表示安装成功；
django.VERSION 可以查看django的版本；
C:\Users\lin\PycharmProjects\python_study_1s\python_study\git-zhl\python-study>python2
Python 2.7.13 (v2.7.13:a06454b1afa1, Dec 17 2016, 20:53:40) [MSC v.1500 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import django
>>> django.VERSION
(1, 11, 3, u'final', 0)

2.
创建django工程
1）django-admin.py startproject csvt01
创建应用
2）django-admin.py startapp blog
3）在settings.py中的INSTALLED_APPS 中加入blog
4）配置一个url, vi urls.py
url(r'blog/index/$','blog.views.index')
5)配置对应的views 函数；vi views.py
from django.httpimport HttpResponse
def index(req):
   return HttpResponse("ok")
6)运行server,通过配置的url去访问对应的视图函数了。
python manage.py runserver


3.django视图和URL配置
1)url.py中配置：
from blog.views import *
引用：   url(r'^blog/index/$', index),

2)url.py中定义的规则：
  a)url地址中包含正则表达式；
   url(r'^blog/index/\d{2}/$', index),
   访问方法：http://127.0.0.1:8000/blog/index/12/

  b)url地址中包含分组（变量名，变量的值）
    url(r'^blog/test/(?P<id>\d{2})/$', test),  在url中可以用分组的形式定义变量
       分组的名称为id, 分组的值为\d{2}  ，即将 id=##传递给视图函数。
       在视图函数中，必须也有id这个参数，id必须和url中的分组名称id相同；这个变量也可以作为参数返回给前台；
       def test(req,id):
           return render_to_response('index.html',{'id':id})

  c)url地址中包含分组（不设定分组的名字）
  url(r'^blog/ttt/(\d{2})/$', ttt),
  这样视图函数中参数的名字就可以随意命名了，此处用parm;
  def ttt(req,parm):
    return render_to_response('index.html',{'id':parm})

    注意：请注意r'^blog/index/\d{2}/$' 和 r'^blog/ttt/(\d{2})/$'的差异，
      前者没有分组，就不会向后台视图传递参数；
      后者有分组，会向后台传递参数；

4）创建并加装模板文件
  创建templates文件夹，在下面创建html模板文件，在vies.py中的配置：
  from django.shortcuts import render_to_response

  def index(req):
    return render_to_response('index.html',{})
5）模板变量：
   由{{}}组成，里面放入模板变量名即可；
    return render_to_response('index.html',{'title':'csvt','user':'jack'})
      第一个参数为模板文件； 第二个{}里面为要传递到前台的数据，以key1:value1，key2:value2...的实现提供，
       但key的名称就可以直接在模板文件中引用了。

    总结：
    模板文件中可以接收  普通的变量；字典；列表；对象(可以使用对象的属性和方法)等；


6）模板标签使用：
if:
{% if user %}
    <li>name:{{ user.name }}</li>
{% else %}
    用户不存在
{% endif %}


for:
<h3>模板标签--for 循环列表</h3>
{% for book in book_list %}
    <li>{{ book }}<br></li>
{% endfor %}
<hr>

<h3>模板标签--for 循环字典1:只取出key值</h3>
{% for k in user %}
    <li>{{ k }}</li>
{% endfor %}
<hr>

<h3>模板标签--for 循环字典2:取出key和value值</h3>
{% for k,v in user.items %}
    <li>{{ k }}:{{ v }}</li>
{% endfor %}
<hr>

<h3>模板标签--for 循环字典2:取出key和value值</h3>
{% for k,v in user.items %}
    <li>{{ forloop.counter }}.{{ k }}:{{ v }}</li>
{% endfor %}
<hr>

<h3>模板标签--for 循环字典2:取出key和value值</h3>
{% for k,v in user.items %}
    <li>{{ forloop.counter0 }}.{{ k }}:{{ v }}</li>
{% endfor %}

7)定义模型
django中通过ORM(对象关系模型来操作数据库的)

service mysqld start 启动数据库
安装MYSQL-python包，确保 MySQLdb可以导入
settings.py 中的DATABASE相关的配置选项的配置，并将blog加入到INSTALLED_app中；
在models定义表数据结构
执行 python manage.py makemigrations
python manage.py migrate
 老的版本django用：python manage.py sync


交互模式下操作数据库：
插入数据项方法1：
>>> emp=Employee()
>>> from blog.models import *
>>> emp=Employee()
>>> emp.name='tony'
>>> emp.age=22
>>> emp.save()

插入数据项方法2：
>>> emp=Employee(name='alex',age=33)
>>> emp.save()

插入数据项方法3： 只执行一条命令，通过调用类的管理器方法来创建记录
>>> Employee.objects.create(name='jerry',age=24)
<Employee: Employee object>


查询命令：
>>> emp=Employee.objects.all()
>>> emp
<QuerySet [<Employee: Employee object>, <Employee: Employee object>, <Employee: Employee object>, <Employee: Employee object>, <Employee: Employee object>]>

>>> emp[0]
<Employee: Employee object>
>>> emp[0].id
1
>>> emp[0].name
u'jack'
>>>

如何要显示各个对象的名字，以便方便区分的话，需要修改models定义的数据表的类，增加一个方法：
    def __unicode__(self):
        return self.name

退出交互器再重新登录后：
>>> from blog.models import *
>>> emp=Employee.objects.all()
>>> emp
<QuerySet [<Employee: jack>, <Employee: tony>, <Employee: alex>, <Employee: jerry>, <Employee: summer>]>
>>>

查询数据并返回前台的方法：
def index(req):
    emps=Employee.objects.all()
    return render_to_response('index.html',{'emps':emps})

8）
django中model对象之间的关系分为以下三种：
多对一关系模型：  many to one
多对多关系模型；  many to many
一对一关系模型    one to one

多对一对象关系：
定义方法：
class Entry(models.Model):
    name=models.CharField(max_length=30)


class Blog(models.Model):
    name=models.CharField(max_length=30)
    entry=models.ForeignKey(Entry)  //many to one定义语句，括号内为one项对应的类名
    所谓many to one,指的时多个 blog对应一个entry;  多（block） 对一（entry）

同步完数据库后，在交互模式下为数据表添加数据：
>>> from blog.models import *
>>> entry1=Entry.objects.create(name='alen')
>>> entry2=Entry.objects.create(name='max')
>>> blog1=Blog.objects.create(name='alen_blog',entry=entry1)
>>> blog1
<Blog: alen_blog>
>>>
>>> blog1.name
'alen_blog'
>>> blog1.entry   //通过many查询one
<Entry: alen>

>>> entry1.blog_set.all()  //通过one反向查询many
<QuerySet [<Blog: alen_blog>]>

结构是： one的对象名.many的表名_set.all()

8）django后台管理相关：
settings.py中的installed_app中启用：  'django.contrib.admin',
urls.py中：
from django.contrib import admin
admin.autodiscover()  此项也可以不要
url(r'^admin/', admin.site.urls),

9)sqlite3 数据库命令行调试命令：
sqlite3 mydb.sqlite3
.help 查询帮助信息
.tables  查询数据库中所有的表
select * from blog_user; 查询 blog_user表中的数据；
.schema * 显示数据表数据项定义


10）多对多的关系模型；
引入一个经典的模型，书和作者（一本书可以有多个作者，一个作者可以写多本书）
class Author(models.Model):
    name=models.CharField(max_length=20)


class Book(models.Model):
    name=models.CharField(max_length=30)
    authors=models.ManyToManyField(Author)  //定义多对多的关系

 进行数据库的同步后，会生成三张表： author book book_author
 在交互模式下进行操作：
>>> from blog.models import *
>>> Author.objects.create(name='alen')
<Author: alen>
>>> Author.objects.create(name='ben')
<Author: ben>
>>> Author.objects.create(name='carl')
<Author: carl>
>>> Author.objects.create(name='max')
<Author: max>

>>> b1=Book()
>>> b1.name='python book1'
>>> b1.save()
>>> aa=Author.objects.get(name='alen')
>>> b1.authors.add(aa)

>>> authors=Author.objects.all()
>>> authors
<QuerySet [<Author: alen>, <Author: ben>, <Author: carl>, <Author: max>]>
>>> b1.authors.add(authors[1])
>>> b1.save()

>>> b1.authors.all()
<QuerySet [<Author: alen>, <Author: ben>]>

>>> b1.authors.all()
<QuerySet [<Author: alen>, <Author: ben>]>
>>> b1.authors.add(authors[2])
>>> b1.authors.add(authors[3])
>>> b1.authors.all()
<QuerySet [<Author: alen>, <Author: ben>, <Author: carl>, <Author: max>]>

移除的方法：
>>> b1.authors.remove(authors[0])
>>> b1.authors.all()
<QuerySet [<Author: ben>, <Author: carl>, <Author: max>]>

>>> b1.authors.filter(name__exact='ben')
<QuerySet [<Author: ben>]>


总结：可以把下面的authors可以看成一个objects的选项；
可以对多对多字段执行增加，删除，查询，过滤等方法；
b1.authors.remove(authors[0])
b1.authors.add(authors[2])
b1.authors.all()
b1.authors.filter(name__exact='ben')

反向操作的方法：
>>> aa
<Author: alen>
>>> aa.book_set.all()  //反向查询
<QuerySet []>
>>> b1
<Book: python book1>
>>> aa.book_set.add(b1)  //反向添加已经存在的book对象；
>>> aa.book_set.all()
<QuerySet [<Book: python book1>]>

>>> aa.book_set.create(name='python book2')  //反向创建一个book元素
<Book: python book2>
>>> aa.book_set.all()
<QuerySet [<Book: python book1>, <Book: python book2>]>
>>> Book.objects.all()
<QuerySet [<Book: python book1>, <Book: python book2>]>

>>> books=Book.objects.all()
>>> books
<QuerySet [<Book: python book1>, <Book: python book2>]>
>>> aa.book_set.remove(books[0])  //反向移除
>>> aa.book_set.all()
<QuerySet [<Book: python book2>]>


10）django表单初步


表单提交，在views.py中的配置步骤
from django import forms

#create form 对象
class UserForm(forms.Form):
    name=forms.CharField()

def register(req):
    //当我们在输入框中输入内容时，就是执行post方法
    if req.method=='POST':  判断提交方法为 POST
        form=UserForm(req.POST)  将提交的数据绑定到form上
        if form.is_valid():  验证数据是否有效，在前端可以验证，如果不输入数据直接提交的话，会提示报错信息
            print(form.cleaned_data) 获取提交的数据，并打印
            return HttpResponse("ok")
    //第一次访问/blog/register/页面时，使用的是get方法  ，此时创建一个form对象，并渲染到模板中去；
    else:
        form=UserForm()
        return render_to_response('register.html',{'form':form})


11）django文件上传相关：
 headImg=forms.FileField()
 文件上传时form的定义要求：
 <form method="post" enctype="multipart/form-data">
 且views中绑定时要追加一个req.FILES

class PersonForm(forms.Form):
    username=forms.CharField()
    headImg=forms.FileField()

def regis(req):
    if req.method=='POST':
        uf=PersonForm(req.POST,req.FILES)
        if uf.is_valid():
            print(uf.cleaned_data['username'])
            print(uf.cleaned_data['headImg'].name)
            print(uf.cleaned_data['headImg'].size)
            下面就是读取文件并保存到本地
            fp=file(uf.cleaned_data['headImg'].name,'wb')
            data=uf.cleaned_data['headImg'].read()
            fp.write(data)
            fp.close()

文件上传的第二种方式：
先在models.py中定义数据类型：
##related with file upload
class User(models.Model):
    username=models.CharField(max_length=40)
    headImg=models.FileField(upload_to='./upload/')

    def __unicode__(self):
        return self.username

进行数据库的同步后，并将这个数据表注册到admin.py中，就可以在admin界面下看到User表了，可以进行文件的上传了，上传后的文件在upload
文件夹下，数据库中保存的是文件的路径名：upload/upload.jpg，而文件保存在对应的路径下；
所以，请注意此处数据库中存储的信息；

文件上传的第三种方式：
将表单上传的文件直接保存到数据库中；
需要定义models,
并在views.py中定义表单对象；

def register(req):
    if req.method=='POST':
        uf=UserForm(req.POST,req.FILES)
        if uf.is_valid():
          通过表单获取数据后，并写入到数据中；
            username=uf.cleaned_data['username']
            headImg=uf.cleaned_data['headImg']
            user=User()
            user.username=username
            user.headImg=headImg
            user.save()
            return HttpResponse('OK')

12）django 会话cookie
http协议是没有记忆的协议，即两个页面之间没有任何关系；
现在就是要通过会话功能，把一个页面的状态传递到另一个页面中；

cookie是保存在客户端，存在安全性的问题，这时就提出一个新的方法，就是session的方法，是将敏感信息存放在服务器端，更安全；

13）session:
http://blog.csdn.net/erjian666/article/details/53781387