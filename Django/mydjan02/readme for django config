@@@
django 后台配置支持中文的方法：
http://www.cnblogs.com/Eric-Young/p/6600461.html
检查  ...\Lib\site-packages\Django-1.10.2-py2.7.egg\django\conf\locale下无zh-cn文件夹，有zh-Hans和zh-Hant两个文件，

其中 zh-Hans是简体中文    zh-Hant是繁体中文


所以更改setttings.py 下

LANGUAGE_CODE = 'zh-Hans'即可


@@@
django创建管理员账户的方法
首先我们要新建一个用户名，用来登陆管理网站，可以使用如下命令：
python manage.py createsuperuser
输入想要使用的用户名：

Username (leave blank to use 'administrator'): user01
输入email：

Email address: (在这里输入你的自己的邮箱帐号)
输入密码，需要输入两次，并且输入密码时不会显示出来：

Password:
Password (again):
当两次密码都相同的时候，就会提示超级帐号创建成功。
Superuser created successfully.


@@待实现的例子：http://cache.baiducontent.com/c?m=9d78d513d99519fc04b8c9690d67d471192383602bd7a1020ede843f96732b32501794ac26520774d5d20c6116df3f4b99fa2173471450bc8cbef95dacb9855f599f2644676a805662d00eaebb5153c637e12afedf69f0c9f526d4ee8cdc851215884404099dedce1f4503ca18af476eb8f7c41e424810cdbc6d3ae2022b7dc23440c011aea661355996f6ab5f49c82dd1631b80af42ea784deb&p=9334c64ad49d59b908e2947e0c4e8c&newp=90759a45d6c21ffa0cbe9b7c4d6483231610db2151d7d1136b82c825d7331b001c3bbfb423241706d2c2766704ad435be0f33470320225a3dda5c91d9fb4c57479d67260&user=baidu&fm=sc&query=django+1%2E11+%C8%E7%BA%CE%B4%B4%BD%A8%B9%DC%C0%ED%D4%B1%D5%CB%BB%A7&qid=f032946800086da4&p1=3


@@@
sqlite3数据库，使用命令行方式创建及调试的方法
参考：http://blog.csdn.net/qq_36482772/article/details/53458400
利用控制台创建数据库db文件：
1)进入python交互命令行后，依次执行：
import sqlite3
conn=sqlite3.connect("mysql01.db");  //如果存在就连接，如果不存在就创建一个新的数据库；
conn.close()


sqlite-jdbc 驱动下载相关：
http://blog.csdn.net/ale2012/article/details/51163029

数据表操作命令：
create table category(
  model_name TEXT,
  qty TEXT
);

insert into category values('python',3);
insert into category values('php',2);

SELECT  ROWID,* from category;


@@@
sqlite3创建的正常的方法如下：
sqlite3 数据库配置相关：

1.配置Django项目中文件

　　①setting.py文件
　　找到DATABASES项，更改为：
DATABASES = {
　 'default': {
　 'ENGINE': 'django.db.backends.sqlite3',
　 'NAME': os.path.join(BASE_DIR, 'blogDB.db'),
}
}

以上内容，ENGINE表示使用SQLite3数据库，NAME表示创建了一个名字为blogDB.db的数据库。

②models.py文件
　　models文件应该在你创建的app目录下，我创建了一个blog的app应用，所以在我的blog目录下（如果没有需要自己创建）
更改models.py文件内容为： 比如定义用户自己的数据包结构；

2.将table同步到数据库

1）在settings的INSTALLED_APPS  中增加 'app01';
2）执行 python manage.py makemigrations app01,切记： 如果只使用python manage.py makemigrations 会返回：No changes detected，即没有创建数据表；
3）执行 python manage.py migrate 完成数据表的创建；

3.创建完数据库后，紧接着创建admin用户；
python manage.py createsuperuser
如果没有数据库，直接创建超级用户会提示失败，因为超级用户也是要存在数据库中的。

4.如果新加入数据表的话，需要依次执行：
python manage.py makemigrations app01
python manage.py migrate

命令执行时，提示信息显示已经创建成功了新的数据表了；

在pycharm 的database插件处，需要选中数据库后，右击选择sychronize,就会立即显示
显示新增加的数据表；
如果只点击标题栏中的刷新，好像没有作用；

remark:对于新创建的表，也可以通过在admin.py中注册新添加的表后，然后再web上就可以立即看到了。




@@@
settings.py中数据相关的配置扩展说明：
# 低版本的django中database的定义比较完整，说明如下：
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',  #其中的sqlite3可以替换成 mysql,oracel,postgresql_psycopg2
#         'NAME': os.path.join(BASE_DIR, 'mydb.sqlite3'), # sqlite3:使用path to database file； 其它的数据库：只写数据库的名称即可
#    the following settings are not used with sqlite3:
#   'USER':'###'
#   'PASSWORD':'###'
#   'HOST':''  empty for localhost
#   'PORT':''  empty for default setting
#  }
# }

@@@
 如何在admin web无法显示表中没行的详细信息，只显示一个个对象的话，
需要在models中为每个class增加一个函数：
  def __unicode__(self): # used to display name infor at admin web
        return self.title
增加完成后，直接刷新web就可以生效了。

@@@
django交互模式下确认数据的操作命令：
在工程的根目录下（即manage.py文件所在的目录下），执行：
python2 manage.py shell  进入交互模式；

from app1.models import *   #导入所有的数据表

@查询数据表：（分为查询全部， 某个， 某些）
1）查询表中的所有条目；
>>> Book.objects.all()   #查询出Book表中所有的条目
<QuerySet [<Book: Python| simple is beautiful>, <Book: PHP>, <Book: Perl>, <Book: Oldbook>]>

2）get（）  精确匹配一条记录；
>>> Book.objects.get(title='Oldbook') #查询具体的某条记录
<Book: Oldbook>

>>> Book.objects.get(title='Oldbook').title  #查询某条记录的某个列元素信息
u'Oldbook'
>>> Book.objects.get(title='Oldbook').publication_date  #查询某条记录的某个列元素信息
datetime.date(2016, 8, 4)

#也可以先付给一个变量，然后通过变量取某个列元素信息
>>> a=Book.objects.get(title='Oldbook')
>>> a.title
u'Oldbook'
>>> a.publisher
<Publisher: Qinghua University publisher>
>>>

但对于多对多关系的列元素，返回的是一个对象,需要再增加一个values（）属性来获取具体的值；
>>> a.authors
<django.db.models.fields.related_descriptors.ManyRelatedManager object at 0x0000000004551828>

>>> a.authors.values()
<QuerySet [{'first_name': u'Alex', 'last_name': u'li', u'id': 1, 'email': u'alex@126.com'}, {'first_name': u'Jack', 'last_name': u'liu', u'id': 3, 'email': u'jack@122.com'}]>

因为get（）是精确匹配一条记录，如果查询的元素不存在，就会报错，而不是返回一个空值；
>>> a=Book.objects.get(title='PH')
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "C:\Python27\lib\site-packages\django\db\models\manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Python27\lib\site-packages\django\db\models\query.py", line 380, in get
    self.model._meta.object_name
DoesNotExist: Book matching query does not exist.

3）通过筛选条件返回多条记录；

>>> Book.objects.all()
<QuerySet [<Book: Python| simple is beautiful>, <Book: PHP>, <Book: Perl>, <Book: Oldbook>]>
>>> Book.objects.filter(title__contains='P')  返回所有title包含P的条目；
<QuerySet [<Book: Python| simple is beautiful>, <Book: PHP>, <Book: Perl>]>
>>>

>>> Book.objects.filter(title__icontains='p')  返回所有title包含P的条目(不区分大小写)
<QuerySet [<Book: Python| simple is beautiful>, <Book: PHP>, <Book: Perl>]>

>>> Book.objects.filter(title__iregex=r'p|P')  使用正则表达式的方式进行匹配
<QuerySet [<Book: Python| simple is beautiful>, <Book: PHP>, <Book: Perl>]>


使用filter获取多个条目后，赋给一个变量，然后再用for循环去打印每个条目的某些列元素；
>>> books=Book.objects.filter(title__iregex=r'p|P')
>>> for i in books:
...   print i.title,i.publication_date,i.publisher
...
Python| simple is beautiful 2017-08-15 Qinghua University publisher
PHP 2017-08-01 Henan univercify publisher
Perl 2017-07-01 Fu Dan University

@数据表增加条目；
>>> p=Author(first_name='tony',last_name='li',email='li@123.com')   先为数据表每个列复制（自增的id列可以不用赋值），然后赋值给一个变量
>>> p.save()   为变量执行save（）方法，就可以添加一条记录了


@@数据表条目删除的方法，可以先用get的方法查询到某条记录，然后执行delete()方法删除此条记录
>>> p.delete()
(1, {u'app1.Author': 1, u'app1.Book_authors': 0})

@@数据表条目更新（即修改某条记录找那个某个列元素）
更新方法1：
>>> p=Author.objects.get(first_name='tony') ##获取对象
>>> p.first_name
u'tony'
>>> p.first_name='jjtony'   #更新某列元素
>>> p.save()  #保存到数据库中
注意，虽然你只修改了first_name,但却要修改这条记录中的所有列元素，其中first_name等于新修改的值，其它的列等于原来的值；
所有效率非常低，如何处理数量很大时，这种方法不要使用，效率非常低；

更新方法2（效率高）
>> e=Author.objects.update(first_name='Quanshi')  如何执行这条命令，会把表中的所有条目的fisrt_name 列都修改为 Quanshi，慎用
正确的方式是，先用get()或filter（）找到某条或某些条记录，然后再执行update方法

>>> e=Author.objects.filter(last_name='li')  先筛选出要修改的条目，付给一个变量；
>>> e
<QuerySet [<Author: Alex>, <Author: jjtony>]>
>>> e.update(first_name='zzzzzz')  为变量执行update方法修改任意一个列元素
2  提示修改了两条记录
>>>



@@@@
djnago前台排错工具：
https://github.com/edoburu/django-debugtools
安装django-debugtools
在INSTALLED_APPS 中增加    'debugtools'


@@@
使用装饰器实现页面认证
http://blog.csdn.net/feng88724/article/details/7262514
1)导入：在views.py中导入如下模块：
from django.contrib.auth.decorators import login_required
并在每个视图前增加：
@login_required

2）在urls.py中：
导入模块：
from django.contrib.auth.views import login,logout_then_login
增加一个url:
   url(r'^accounts/login/$',login,{'template_name':'index.html'})
 重要：
   因为django的认证系统内部使用了关键字模块 login，所有我们自己定义视图函数时，就不可以用login,否则就会报错；
   因为我一开始使用了，所以后来把 login 修改为account_login， 并修改相关的前台页面及 url等等；
   这点非常重要，切记；

 3）另外关于自动认知模块：@login_required
 在主页和 登录页面前不要加，否则会进入死循环中；


